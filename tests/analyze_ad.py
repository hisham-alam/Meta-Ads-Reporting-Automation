#!/usr/bin/env python3
"""
Test script to analyze a specific Meta ad and save results to a JSON file

Usage:
    python analyze_ad.py [ad_id]
    
This script:
1. Retrieves detailed data for a specific ad from Meta API
2. Analyzes performance against benchmarks
3. Displays key metrics and performance results in the terminal
4. Saves the complete analysis results to a JSON file in tests/output folder
"""

import sys
import os
import json
from datetime import datetime
from pathlib import Path

# Add the project root to the path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Import required modules
from src.meta_api_client import MetaApiClient
from src.performance_analyzer import PerformanceAnalyzer
# Insight generator removed - will be replaced with AI
from config.settings import SPEND_THRESHOLD

def analyze_ad(ad_id: str, save_output: bool = True) -> dict:
    """
    Analyze a specific ad, print results, and optionally save to JSON file
    
    Args:
        ad_id: Meta Ad ID to analyze
        save_output: Whether to save results to JSON file
        
    Returns:
        dict: Analysis results or empty dict if analysis failed
    """
    print(f"Analyzing ad ID: {ad_id}\n")
    
    # Initialize clients and analyzers
    meta_client = MetaApiClient()
    performance_analyzer = PerformanceAnalyzer()
    
    results = {}  # Store results for saving to file
    
    # Test connection
    if not meta_client.test_connection():
        print("❌ Failed to connect to Meta API")
        return results
    
    print("Fetching ad details...")
    try:
        # Get detailed ad data
        ad_data = meta_client.get_complete_ad_data(ad_id)
        if not ad_data:
            print("❌ Failed to retrieve ad data")
            return results
        
        # Store ad data in results
        results["ad_data"] = ad_data
        
        # Print basic ad details
        print(f"\nAd: {ad_data.get('ad_name')}")
        print(f"Campaign: {ad_data.get('campaign_name')}")
        print(f"Created: {ad_data.get('created_time')}")
        print(f"Status: {ad_data.get('status')}")
        
        # Print key metrics
        metrics = ad_data.get('metrics', {})
        print(f"\nKey Metrics:")
        print(f"  Spend: £{metrics.get('spend', 0):.2f}")
        print(f"  Impressions: {metrics.get('impressions', 0)}")
        print(f"  Clicks: {metrics.get('clicks', 0)}")
        print(f"  CTR: {metrics.get('ctr', 0):.2f}%")
        
        if 'video' in metrics:
            video_metrics = metrics.get('video', {})
            print(f"\nVideo Metrics:")
            print(f"  Views: {video_metrics.get('views', 0)}")
            print(f"  25% completion: {video_metrics.get('p25', 0)}")
            print(f"  50% completion: {video_metrics.get('p50', 0)}")
            print(f"  75% completion: {video_metrics.get('p75', 0)}")
            print(f"  100% completion: {video_metrics.get('p100', 0)}")
        
        # Analyze performance against benchmarks
        print("\nAnalyzing performance against benchmarks...")
        performance_results = performance_analyzer.analyze_performance(ad_data)
        
        # Store analysis results
        results["analysis_result"] = performance_results
        
        if performance_results:
            print(f"\nPerformance Results:")
            benchmark_comparison = performance_results.get('benchmark_comparison', {})
            rating = benchmark_comparison.get('performance_rating', 'Average')
            score = benchmark_comparison.get('overall_performance_score', 0)
            
            print(f"  Overall Rating: {rating} (Score: {score:.1f})")
            
            metrics_vs_benchmark = benchmark_comparison.get('metrics_vs_benchmark', {})
            if metrics_vs_benchmark:
                print("\n  Key Metrics vs Benchmarks:")
                for metric, value in metrics_vs_benchmark.items():
                    direction = "better" if value > 0 else "worse"
                    print(f"    {metric}: {abs(value):.1f}% {direction} than benchmark")
        
        # Insights section removed - will be replaced with AI
        print("\nInsights:")
        print("  • Insights generation will be implemented with AI separately")
        
        # Add placeholder insights to results
        results["insights"] = {
            "summary": ["Data analysis complete. Insights will be generated by AI."],
            "formatted_text": "Data analysis complete. Insights will be generated by AI."
        }
        
        # Save results to file if requested
        if save_output:
            output_path = save_results(ad_id, results)
            if output_path:
                print(f"\nResults saved to: {output_path}")
        
        return results
        
    except Exception as e:
        print(f"❌ Error analyzing ad: {str(e)}")
        import traceback
        print(traceback.format_exc())
        return results

def save_results(ad_id: str, results: dict) -> str:
    """
    Save analysis results to a JSON file
    
    Args:
        ad_id: Meta Ad ID that was analyzed
        results: Analysis results dict
        
    Returns:
        str: Path to the saved file or empty string if save failed
    """
    try:
        # Create output directory if it doesn't exist
        output_dir = Path(__file__).parent / "output"
        output_dir.mkdir(exist_ok=True)
        
        # Generate filename with timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"ad_analysis_{ad_id}_{timestamp}.json"
        output_path = output_dir / filename
        
        # Save results to file
        with open(output_path, 'w') as f:
            json.dump(results, f, indent=2, default=str)
        
        return str(output_path)
    except Exception as e:
        print(f"❌ Error saving results: {str(e)}")
        return ""

if __name__ == "__main__":
    # Get ad ID from command line or prompt
    if len(sys.argv) > 1:
        ad_id = sys.argv[1]
    else:
        ad_id = input("Enter the ad ID to analyze: ")
    
    # Run the analysis and save results
    analyze_ad(ad_id, save_output=True)