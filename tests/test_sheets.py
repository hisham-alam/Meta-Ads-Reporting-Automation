#!/usr/bin/env python3
"""
Test script to debug Google Sheets integration.

This script:
1. Loads existing ad data from the tests/output directory
2. Processes the data through the performance analyzer
3. Updates Google Sheets with the properly analyzed data
4. Prints the URL to access the Google Sheet
"""

import os
import sys
import json
from pathlib import Path
from datetime import datetime

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Import components
from src.sheets_manager import SheetsManager
from src.performance_analyzer import PerformanceAnalyzer
from src.data_validator import DataValidator

def main():
    print("Starting Google Sheets test...")
    
    # Load ad data from the most recent JSON file in tests/output
    output_dir = project_root / "tests" / "output"
    json_files = list(output_dir.glob("ad_analysis_*.json"))
    if not json_files:
        print("No ad analysis files found in tests/output directory")
        return
    
    # Get the most recent file
    latest_file = sorted(json_files, key=os.path.getmtime)[-1]
    print(f"Using ad data from: {latest_file}")
    
    # Load the JSON data
    with open(latest_file, 'r') as f:
        data = json.load(f)
    
    # Extract region from filename (e.g., ad_analysis_GBR_20250814_234252.json)
    region = "GBR"  # Default region
    if "_" in latest_file.stem:
        parts = latest_file.stem.split("_")
        if len(parts) > 2:
            region = parts[2]
    
    print(f"Using region: {region}")
    
    # Step 1: Get raw ad data
    raw_ads_data = []
    for entry in data:
        if "ad_data" in entry:
            raw_ads_data.append(entry["ad_data"])
    
    if not raw_ads_data:
        print("No valid ad data found in the JSON file")
        return
    
    print(f"Found {len(raw_ads_data)} raw ads data to process")
    
    # Step 2: Process through analytics
    print("\nAnalyzing ad data...")
    validator = DataValidator()
    analyzer = PerformanceAnalyzer()  # Initialize with default benchmarks
    
    # Create analyzed_ads in the format expected by SheetsManager
    analyzed_ads = []
    
    for ad_data in raw_ads_data:
        # First validate
        validation_result = validator.validate_ad(ad_data)
        if not validation_result['valid']:
            print(f"Ad {ad_data.get('ad_id', 'unknown')} failed validation: {validation_result.get('reason')}")
            continue
            
        # Then analyze
        analysis_result = analyzer.analyze_performance(ad_data)
        
        # Add placeholder insights
        analysis_result['insights'] = {
            "summary": ["Data analysis complete. Insights will be generated by AI."],
            "formatted_text": "Data analysis complete. Insights will be generated by AI."
        }
        
        # Add to analyzed ads
        analyzed_ads.append({
            "ad_data": ad_data,
            "analysis_result": analysis_result
        })
        
        print(f"Successfully analyzed ad: {ad_data.get('ad_name', 'Unknown')}")
    
    print(f"\nCompleted analysis of {len(analyzed_ads)} ads")
    
    # Step 3: Update Google Sheets
    try:
        print("\nInitializing SheetsManager...")
        sheets_manager = SheetsManager(region=region)
        
        print(f"Updating Google Sheets with {len(analyzed_ads)} ads...")
        results = sheets_manager.update_ad_details_batch(analyzed_ads)
        
        # Get spreadsheet URL
        spreadsheet_url = sheets_manager.get_spreadsheet_url()
        
        print("\nGoogle Sheets updated successfully!")
        print(f"Access your Google Sheet at: {spreadsheet_url}")
        
    except Exception as e:
        print(f"Error updating Google Sheets: {str(e)}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    main()